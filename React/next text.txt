ch1~4 더미데이터로 프론트
ch5~ 백엔드 더하고

Next Server side rendering

브라우저 / 프론트 서버 / 백엔드 서버 / DB    2~4개로 나뉜 경우가 있음

방식의 장단점
4개 다 거치는거.. 사이트 항방에 다 나오는데 로딩이 길어짐
  3초 이내 로딩이 안되면 사람들이 기피 (로딩이라도 보여야 함 )

어떤 서비스는 리액트를 안써도 됨.. 훨씬 빠를 수도 잇는데
리액트가 모든 페이지를 불러와야 해서 생각보다 느릴 수 있음

국내에서 검색하기에는 별로 않좋다는거네.. 그럼 네이버나 다음이나

해결방법 => 서버 사이드 렌더링 (검색 엔진을 위해)
첫 요청때 모든 페이지를 주는거는 비효율적이라서 코드 스크립팅으로 방문한 페이지만의 데이터를 보냄
프리렌더링 => 검색 엔진 / 일반 사용자 판별해서 렌더링, 서버 사이드 렌더링(첫 방식만 전통, 나머지는 리액트 방식으로)

코드 스플리팅 + 서버 사이드 렌더링 꼭 필수임

넥스트를 쓸 필요 없는 서비스 : 
  어드민 페이지, 복잡할 필요 없음, 

  리액트로 서버사이드 렌더링 하기 위해서는 reactGO 깃 가서 한번 보셈


버전 고정 설치 
npm i next@9
npm i ~ -D  대문자 D 로 해야 개발 모드로 들어간대요...ㅜㅠ
npm i eslint-plugin-import -D
npm i eslint-plugin-react-hooks -D

pages 폴더는 꼭 pages 여야만 하고 나머지 폴더는 어찌 되든 상관 없음.


제일 처음페이지 로딩 속도 다소 느린데 그거는 개발모드라서 그런거고
배포 모드면 느린거는 없어짐 그래서 걱정 ㄴㄴ임

SSR 필요하면 cors 해결해야 함
서버 2개 씀 프론트 서버, 백엔드 서버 노드라던가 파이선이라던가 2개의 서버가 필요함

리액트 주로 하는 이유는 고객 경험 => 웹 앱을 쓰는 경험같은,.. 느낌
앱인지 웹인지 잘 구분 못하도록...
근데 다 이렇게 하고 잇네 모든 업체들이???? 그냥 다 그렇게 가는듯
모바일로의 검색이 계속해서 증가하니까 그건 어쩔수 없는듯

로딩을 없애는 목적으로 서버 사이드 렌더링을 하면 편함
캐싱 까지 적용하면 정말 효율적임

동적 라우팅 [name].js 이렇게 해서 쓰는건데 이거는 6강 즈음에서 다룰 예정


타이틀 수정을 위해서는 head import 해서 사용
import Head from 'next/head;
여기서 <Head><meta charet ...> <title>... 뭐 이ㅓㄹㄴ식으로 쓰고 아니면 나뉘서 쓰면 됨

반응형을 디자인 할때는 작은것 부터 큰것으로 디자인을 늘려 나가세요 xs 모바일 sm 태블릿 md 작은 데스크탑
반대로 하면 정말 괴로움...
가로 먼저 쭉죽 자르고 그다음 세로로 

Row 에서 컬럼 사이 간격을 주는거 gutter <Row gutter={8}> 이런식으로 씀


링크 새창에서 듸울때 주의사항
<a href="www" target="_blank" rel="noreferrer noopener"> asdfafdsf </a> 이런식으로 써야 보안 위험 안뜸


style={{ }} 이렇게 객체 넣지 마세요
리 렌더링 될떄마다 객체를 새로 생성하게 되는데 {} === {} 이거 비교하면 false 나옴
그래서 새로 생성될때 마다 새로운걸로 인식되어서 매번 리렌더링 됨...
vertualdom 으로 변경된거 체크... 실제로 변경된것은 없는데 그냥 진행 됨

그래서 여기다가 styled-componets 를 사용하게 되는거임.... ㅠㅍ

useCallback useMemo 차이 콜백은 함수 캐싱, 메모는 값을 캐싱

form htmlType='submit' 이면 onFinish 호출됨.. 그래서 값이 전송됨
<Form onFinish={onSubmintForm} > ..
ant design 에서 e.preventDefault() 이거 하면 안됨 자동으로 먹혀있음



리덕스 이제 붙혀봅시다잉

근데 넥스트에서는 프로바이더 이런거 붙혀주는게 더이상 필요가 없다네??
Provider store 이렇게 썼엇는데 페이지를 provider 로 감쌋는데 더이상 필요 없음

6버전에서 부터는 알아서 감싸줌... 그래서 더이상 필요가 없음! 원래는 그럼

중앙 데이터 저장소.... state 같은거 하나정도는 기본적으로 쓰는게 좋음.. 그래프 ql 에서는 아폴로
redux, context API???, 

규모가 어느정도 되는 서비스가 말이여

가장 많이 슨ㄴ게 리덕스,  생산성은 모빅스??

리덕스 => 에러 날 일이 없음.. 안정, 코드량이 많아짐
모빅스 => 추적이 어려움

중앙 저장소는 서버에서 데이터 받아서 (비동기로 받음)
데이터 처리 실패에 대비를 해야함... 
비동기는 3단계 요청 / 성공 / 실패에 대한 응답 

컴포넌트는 화면에만 집중하고
데이터는 다루는 것은 따로.... 하는게 좋다고 합니다 이사람은
별도의 모듈이나 라이브러리를 통해서 처리하세요

리듀스....
데이터 중앙 저장소

리덕스는 내가 자주 쓰는거 ㅇㅇㅇ


react redux 에서 useSeletor 사용가능함

state 분리작업 시작

리덕스 구조는 합의를 하셔야 하고요
잘못하면 나중에 다 바꿔야 해서 쓸데없는 일이 늘어납니다

공간 배치를 먼저 고려해서
먼저 컴포넌트를 넣은다음에 구현하면 됨

맵을 쓰면 키를 써줘야 하는데
map(post, index) => 인덱스를 키로 쓰면 안됨
게시글이 지워지거나 추가, 변경 될 경우 위와 같이 하면 안됨

eslint스면 첫번째 줄에 import react 써줘야 함.. 안쓰면 에러

dispatch 자리에는 객체가 들어가는게 맞다!

섣부르게 최적화하면 오히려 독이 될수도 잇따!!