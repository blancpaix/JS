Overall
  반응형 페이지 디자인은 작은 플랫폼 부터 (모바일xs - 태블릿sm - 데스크탑md 순서)
  리액트에서는 컴포넌트(순수화면)/컨테이너(데이터 다룸) 폴더 구분했으나 Hooks 나오면서 굳이 나누는것을 추천하지 않음
  스타일 태그에서 직접적으로 객체 기입 자제. (객체 새로 생성 => 다시 렌더링, 메모리 낭비)

  favicon 은 프론트 서버에서 넣는걸로
  favicon.ico 라는 파일로 넣어야 적용이 됨

Next
== Directory
  Next
    -pages
      무조건 고정, 여기 파일들로 페이지 구성됨 (폴더 내 컴포넌트 모두 소문자 처리 필요

== Router
  Next 자체 라우터 기능 제공
  import Link from 'next/Link'
    // 리액트 라우터 안써요

== SSR
  서버사이드 렌더링용 메서드 4개 제공하지만 오류가 많아 NextReduxWrapper 제공 메서드랑 사용하는게 좋음

  쿠키전달은 브라우저랑 백이랑은 이전에 했는데 withCredential로
  근데 프론트랑 백 사이의 전송은 따로 설정해야 함
  브라우저 => 백  쿠키는 브라우저가 담아줌 axios에서 header 설정 안해줬음
  프론트 => 백    브라우저는 개입조차 못함, 쿠키는 자동으로 보내주는게 아니기때문에 우리가 직접 넣어서 보내줘야 함

  getStaticProps?   이게 짱이긴한데 쓸 방법이 별로 없음...커머스의 이벤트 페이지는 가능할듯
  getServerSideProps?   !!!!!!!!!!!!!!!!!!!! 이거 쓰세요
  두개의 차이는? 언제 접속해도 데이터가 바뀔 일이 없으면 static 쓰시고   이거 쓰기 까다로움   블로그 포스팅 등 안바뀌는거는 나중에 NEXT에서 정적인 html 으로 뽑아줌
    정적인거는 쓸수 있으면 static 쓰는거 추천 만들어놓는게 서버에 무리가 덜감
    블로그 게시글이나 뉴스 등 말고는 계속해서 값이 바뀌니까 만들어놓기가 힘듦
    상품도 가격, 재고상황, 글 등등 수시로 바뀌니까 별로임
  접속 상황마다 화면이 바뀌어야 하면 ServerSideProps 쓰세요   왠만하면 이거 씀...

  babel 이 계속해서 도는데 이거 건드려야 함
   styled Component사용하기 위해서d 일단 파일 생성 .babelrc
   아예 다른것도 이렇게 만들어서 쓰셈
   기본 설정은 { "presets": ["next/babel], "plugins: []}
   displayname 은 개발모드에서 외계어가 컴포넌트 이름으로 바뀌어서 해주는게 좋음
   npm i babel-plugin-styled-components 사용해야 함

   그리고 std 를 서버사이드로 렌더링 하려면
   send 눌렀을때 std 가 떠있어야 함..
   페이지에 _app.js 보다 상위 _document.js 이거를 만들어

  
  바벨 폴리필은 너무 무거워서 polyfill.io 에서 받아서 씁니다 ㅎㅎㅎㅎ

  다이나믹 라우팅
    js 파일명에서 바뀔 명칭을 대괄호로 감싸줌 [id]

    TypeError [ERR_UNESCAPED_CHARACTERS]: Request path contains unescaped characters
    한글 파라미터 전송시 변환 해줘야 함 /hastag/리액트 여기 리액트가 문제 일으킴
    encodeURICompontnt(리액트)

  getStaticPaths
    이거는 get static props 랑 같이 쓰면서 다이나믹 라우팅이랑 같이 쓸 때 사용
    getStaticProps 사용할때 Path 지정 안해주면 오류뜹니다
    export async function getStaticPaths() {
      // 리턴할거 두가지, paths, fallback
      return {
        paths: [ { params: { id: '1' }},{ params: { id: '2' }},{ params: { id: '3' }}],   // 미리 페이지 빌드하기 위해서 값을 먼저 넣어주는거임
        fallback: false // true면 위에 해당 파라미터가 아니어도 에러가 안뜸
      }
    }

React Hooks
  useMemo: 값을 캐싱
  useCallback: 함수를 캐싱  ** 근데 그 뒤에 ,[] 이거 붙는거 인자가 뭘로 들어가는거임?

SWR next 에서 만든거
  액션들을 너무 많이 만드는데.. 지금 3개씩 만들어뒀거든??이런거를 간단하게 만들어주는 라이브러리
  npm i swr
  로드 할때는 엄청 편한데 단점은 서버사이드 렌더링을 할때는 불편함...
  쓸곳은 서버사이드 렌더링을 할 필요없지만 불러와야 하는 데이터들...??
  예로 들면...
  팔로잉 팔로워 리스트?? 굳이 서버사이드 렌더링 할 필요 없는거
  검색엔진에 노출이 필요 없는거지... 서버사이드 렌더링이 주로 검색 엔진에 노출이 되는거야 함 그리고 로딩 속도 빠르게함인데
  

Redux : 중앙저장소-contextAPI redux Mobax graphQl-Apollo
  서버에서 데이터 받아오는거는 비동기로 이뤄짐 => 실패에 대비해야 함.
  비동기는 3단계 나눔: 요청, 성공,  실패 이거를 contextAPI 에서 구현하려면 직접 다 구현해야 하는데
  컴포넌트는 화면 다루는거에 집중을 하고 데이터는 다른곳에서 처리를 해주세요....
  의도치않은 코드 중복이 밣생 할 수 있기 때문에... 비동기 처리도 redux 나 Mobax 에게 맡김

  원리 간단, 에러 추적 용이, 앱 안정적, 코드량 많음
  초보한테 좋음 다만 코드량이 많음
  Next 에서 Redux 사용을 위해서 next-redux-wrapper 설치, 사용 필요
  
  reducer - switch(action.type) { case '1': return { ... } case2... }
  항상 다른 객체를 return을 함. 객체를 새로 만들어야 변경 내역들이 추적이 가능함... 히스토리가 남는건데
  ... 안에 들어있는 객체는 참조를 함. 그래서 ...state 하면 이전의 객체들은 그대로 참조관계 유지함
  => 메모리 아낄 수 있음  다만 그래도 채팅에도 그렇게 좋지는 않을듯한데
  개발에서는 히스토리 계속해서 들고잇음, 배포면 히스토리를 중간에서 버림 (메모리 문제 없을듯?)
  const prev = { a: nest };
  const next = { ...prev};
  prev.a === next.a;  // true     prev === next;  // false     {a: 'b'} === {a:'b'};  // false

react-redux
  useSelector 을 설치를 하는데 useContext 랑 비슷한거 아닌가???
  이게 무튼 리액트랑 리덕스 연결해주는거랍니다!

  useDispatch 이거 쓰면 useState 쓸 일이 줄어듦


Mobax
  나중에 익숙해지면 이거 쓰는게 편할듯
  리액트 자유롭게 쓸수 있고 생산성 추구하면 추천

Redux-devtools
  npm i redux-devtools-extension
  브라우저 개발자 도구랑 연동

redux-thunk
  리덕스의 middelware 리덕스의 기능을 향상시켜줌
  미들웨어를 다룰건데 리덕스가 비동기액션을 디스패치 할수 있게 도와줌
  리덕스 사가를 많이 쓰는데 성크는... 그냥 프로그래밍 용어임 지연된 함수같은거???
  함수가 지연 이라는 뜻도 있음

  함수를 호출 할때 dispatch 가 되도록 함, 디스패치를 여러번 할  수 있는 장점
  비동기 액션 하나 안에 여러개의 동기 액션 가능함. 2번 이상 트리거 가능
  dispatch 가 한방에 할 수 있도록

  미들웨어가 간단한게 3단 함수인데 3개의 화살표를 가지면 됨 미들웨어는 항상 3개의 화살표???
  const sampleMiddleware = ({ dispatch, getState }) => (next) => (action) => {
    if (typeof action === 'function') {   // action 은 원래 객체임 근데 thunk 에서는 function 으로 둘 수 있음
      return action(dispatch, getState, extraArgument);
    }
    console.log(action);  이게 끝임. 위에거 2줄 필요없고
    return next(action);
  };
  thunk 는 많이 쓰여서 그냥 간단하게 언급하고 넘어갑니다 sega 가 많이 씀

redux-saga    next 랑 연결하면 방법이 또 달라서 그게 문제여
  npm i redux-saga next-redux-saga
  configureStore에서 설정하고 _app 에서 App을 감싸줘야 함

  리덕스 단점이 코드가 엄청 길어짐

  사가랑 리듀서에 이벤트 동시에 일어남 완전히 동시는 아니고 순서는 있는데... 알려면 콘솔 찍어보세요

react-slick + slick-carousel
  carousel 중에서는 가장 유명하다고?? 그냥 컴포넌트라고 생각하세요
  드래그해서도 넘길 수 있어서 모바일까지 들어가야 한다면 추천

  slick-carousel 이것도 같이 설치하셔야 합니다!
  _app.js 에 추가 필요
  import "slick-carousel/slick/slick.css";
  import "slick-carousel/slick/slick-theme.css";

react Form 이나 react hook Form 인가 좋은 폼 라이브러리 구해서 쓰세요! 추천

redux-toolkit 이거 따라하심 좋을듯 굳이 switch 를 안써도 됩니다만... 짬뽕해서 쓰기에는 좀 어려울수도
리덕스 워낙 코드가 기니까 이렇게라도 써ㅘ라고 하는거임

react-virtualized
  보이지 않는 부분 렌더링 안하고 필요하면 렌더링 함 => 메모리 낭비 최소화
  화면에 보이는 게시글 최대 3~4개라고 가정하고 나머지는 메모리에만 갖고 있도록 ==> 해당 영역만 렌더링, 그 이외부분은 감춤 (인스타그램에서 사용)
  virtualized 라는 기술
  채팅에서는 필수일듯

  이거 알아서 좀 해보세요~

npm
  npm i ~@version : 해당 version 만 설치
  npm i ~ -D : 개발용으로 설치 (대문자 D)
  npm rm ~ dependency삭제 (remove)

  package.json 파일 scripts 에서 next build 할당 함 이걸로 하면 좀 걸리는데 하면 CD CI 코드 테스트, 빌드 등등...
  빌드 테스트도구를 깃헙에 연결 해놓고 푸시하면 알아서 CI CD 툴 돌아가고 알아서 배포하도록 하느게 cd ci 툴인데
  젠킨스, 트레비스ci 서클ci 이런거 유명함
  npm run build 로 실행

  페이지별 1메가 넘지 않으면 서비스 할만함 근데 줄이는거를 추천하고
  그 이상이람ㄴ react.lazy suspence 등등으로 코드 스플리팅 하세요 안하면 모바일에서 렉 걸릴듯?

  404 페이지는 next 도큐먼트 참고해서 만들어요
  나머지 설명안한거 한번씩 보세요.. 필요할수도 있고 특이한 케이스 amp 를 쓰던가 이런거는 혼자서 해보시고 특이케이스 마이지

  용량을 이번에는 분석을해볼거여
    npm i @next/bundle-analyzer

  빌드 할때 analyzer 에서 자잘하게 쪼개진것들은 삭제가 가능한데 삭제하는 방법은 인터넷 검색을 하세요
  moment locales tree shaking 이렇게 검색하면 됨
  new webpack.ContextReplacementPlugin(/moment[\/\\]locale$/, /kr/)
  이런 작업은 배포 직전에만 하세요 앱 완성을 끝냈다 하면 돌리는거인데
  // 서버쪽은 솔직히 건드릴게 없는데... 저기 프론트에서 다들 날려야 됨
  

Eslint
  npm i eslint eslint-plugin-import eslint-plugin-react eslint-plugin-react-hooks -D    // eslinst 설치
    eslint에서 extends 가 실제적인 규칙인데 recommend, react/recommended 가 너그러워서 나중에 엄격하게 바꿈
    npm i -D babel-eslint eslint-config-airbnb eslint-plugin-import
    npm i -D eslint-plugin-react-hooks
    npm i -D eslint-plugin-jsx-a11y
      (a11y : Accessability접근성,)
      조금 더 엄격하게 갑시다잉

    {
      "parser": "babel-eslint",
      "parserOptions": {
        "ecmaVersion": 2020,
        "sourceType": "module",
        "ecmaFeatures": {
          "jsx": true
        }
      },
      "env": {
        "browser": true,
        "node": true,
        "es6": true
      },
      "extends": [
        "airbnb"
      ],
      "plugins": [
        "import",
        "react",
        "react-hooks"
      ],
      "rules": {
        "linebreak-style": 0,
        "jsx-a11y/label-has-associated-control": "off",
        "jsx-a11y/anchor-is-valid": "off",
        "no-console": "off",
        "no-undersocre-dangle": "off",
        "react/forbid-prop-types": "off",
        "react/jsx-filename-extension": "off",
        "react/jsx-one-expression-per-line": "off",
        "object-curly-newline": "off"
      }
    }

immer 불변성 유지 필수품   리액트에서도 사용하고 리덕스도 사용하고    hooks 는 use-immer 다운
  npm i immer
  이머 적용 이전 리듀서하고 비교해보세요
  .eslintrc rules 에 추가 - "no-param-reassign" : "off"

faker
  npm i faker  더미 데이터 포트폴리오 멋이 안남.. 그래서 이걸로 쓰면 좋음 게시글 많이 만들어봐라고

placeholder.com 더미 이미지에는 이거 쓰면 좋을듯

날짜 라이브러리
  뭐 많이 쓰는지 momentjs 70kb 가 제일 많고 date-fns, dayjs 이 요즘 많이 스고
  불변성 때문에 date-fns 사용
  데이터 용량 대문에 dayjs 사용 2kb
  day js 방식 써보세요!

  moment 쓰면 get full year 이딴거 필요 없음 newDAte().getMonth() 이런거 말고 format() 사용해서 간단하게 줄임
    근데 배포할때 moment 가 상당히 에러를 많이 만듦
    

antd  쭝국산...
  npm i antd@4 @ant-design/icons
  디자인이 획일화 되는 단점. 개인 개발일 경우 추천
  아이콘 팩은 용량이 크기 때문에 다른 라이브러리로 분리한 경우가 많음

  Col 간의 padding 조절 gutter

  Form 은 보통 .preventDefault 적용되어 있는 경우가 많음 antd 에서 굳이 할 필요가 없음!
    <Button htmlType="submit"> 이거 누르면 Form 데이터가 제출됨

styled-components 이거... 요즘은 emotion.sh 이거를 많이 쓴다네요??
  이거 사용하려면 바벨 설정이 필수입니다!
  npm i styled-components

  [ERR] next 에서 Error: Props 'className' did not match 오류 => 바벨 설치(babel-plugin-styled-components)
    SSR 작동, CSR화면 렌더링 시 서버의 해시+클래스명과 클라의 해시+클래스 명이 달라져 스타일 로드 불가
    npm i babel-plugin-styled-components
    .babelrc 설정
    { "presets': ["next/babel"], "plugins": ["babel-plugin-styled-components"] }
    { "presets': ["next/babel"], "plugins": ["babel-plugin-styled-components", { "fileName"; true, "displayName": true, "pure": true }] }
    -옵션 추가시 코드 포함된 파일명, 클래스명 해당 스타일 정보, 사용하지 않은 속성 제거

  파스칼 케이싱 사용 (PascalCasing)

shortID
  npm i shortid -D 
  아이디 정하기 애매한것들은 이거 사용(더미)
faker
  npm i faker -D
  샘플 데이터 제공 (더미)


REGEX
  //g 여기서 g가 붙으면 여러개, 없으면 하나만
  /#/g #만 선택 됨
  #. #다음모든 한 글자
  #... #다음 세글자
  #.+ 그다음 글자 모두 선택
  공백을 제거하기 위해서는 [] 를 사용
  /#[]+/g
  /#[해익제] 해, 익, 제 로 시작하는 글자만 선택
  /#[^해익] 해, 익 시작하는 글자 제외
  /#[^\s]   \s 가 공백

  완성: /#[^\s#]+/g
  근데 js 에서 splite 을 사용할 때는 정규표현식 부분을 괄호로 감싸야 함
  .splite(/(#[^\s#+)/g])   이거 구글 검색하세요 그때그때 보시고



서버 연동
  CORS problem
    차단은 브라우저가, 허용은 서버가?
    res.setHeader('Access-Control-Allow-Origin', 'http://localhost:3001');
    이렇게 헤더 설정하면 되지만 보통 미들웨어를 사용해서 처리함  
    다른 도메인으로 요청을 보내면 브라우저가 차단을 함
    서버에서 서버로 보내면 문제가 생기지 않음
    브라우저에서 다른 도메인 서버로 요청을 보낼때 발생

    그냥 브라우저에서 프론트=>백엔드=>db=>백=>프론트 (프록시 방식)

  다른사람들이 백서버에 직접적으로 접근을 브라우저에서 차단하기 위해서 CORS 보안정책


요청 응답은 최대한 가볍게 만들어

10달짜리 프로젝트라고 하면 대부분 주요 기능은 2달안에 구현이 되는데
디테일한게... 디테일 신경쓰는게 나머지에 다 소요됨
중요한거는 정작 얼마 소요가 안됨 큼직한거
자잘자잘한 기능에다가 많이 소요됨.... 뭔가 사람들이 많이 안쓰는 기능을 알아서 구현을 해야 하기 때문에 그렇겟찌

이미지 리사이징, 클라우드 저장, https 전환 등등

서버 사이드 렌더랑은 여기서 끝임...

누구한테나 보이는 페이지가 같다고 하면 static page 를 쓰세요
처음부터 눈에 다 보일 필요는 없으니가 
상단부분은 고정 html 방식으로 static 페이지 쓰고 하단 부분에는 useEffect 등과 같은 방식으로 SSR 방식을 혼합 적용하면 좋겠네

익스프레스 알면 코아나 하피 그냥 넘어갈 수 이씅ㅁ... 다큐먼트 같은 서버사ㅣ드 렌더링은 그냥 그대로 하셔야 합니다
get initial props 가 다큐먼트나 _앱에서만 쓰고 있느데 조만간 사라질 것 같은 기분이 듭니다!


노드 하기위해서 필요한거
  비동기 프로미스 이벤트 루프   이 세가지를 먼저 잘 익히고 시작하는게 좋습니다
  아니라면 이 세개가 발목을 잡기 때문에 조심하셔야 합니다

자바스크립트 info 여기가 공부하기에는 좋은데
한 사이트로 모두 공부를 하겠따는거는 지나친 욕심이고 직접 코딩을 해봐야 느낌
그래서 실전에서 구르는게 학습 속도가 제일 바름
시중에 책을 볼필요가 없는데 외웠다고 코드가 막 나가질 않으니까 그건 연습을 해보셔야 함
강의를 어떻게 쓰는가에 따라서 차이가 많이 남

온라인 강의는 슥듭 능력이 중요한거임

다른 기능을 붙이는데 엄청 오래걸림
실제로 초보자가 다 공부하면서 하면 6개월 정도 걸릴듯
20시간으로 압축을 시킨건데.. 다르페이지 만드는데 한페이지 만드는데 몇주씩 걸릴 수 있음
실제로는... 강좌 만드는데 최소 한달정도 만들고 압축하는거임
다른 페이지 다르 기능을 만드는데 시간이 엄청 걸리니까 엄청 급하게 생각을 안하는게 좋음

프로그램은 모두 알고리즘
절차가 있으니까...
코딩 테스트할대 쓰는거 말고도 일반적으로 ㅅ느느것도 알고리즘
보틍 이런것만 파는사람은 알고리즘 연구원이고
일반적인 생활 코딩은 그냥 논리적 사고력만 잇으면 됨
http 소통 원리 위주로..
코딩 테스트는 연구원 한테나 추천 알고리즘은 특정 분야 아니면 쓸 일이 거의 없는게 사실이긴 함...

알고리즘 잘 하는 사람은 프로그램도 잘 만드는데 그 반대는 잘 모름... ㅋㅋㅋㅋ
그래서 그런듯 효율성 때문에 그럼 자기 회사 제품을 잘 만들지 팒단하는게 간단하게 알고리즘이라서 그럼

그래도 어느정도 대학 수준은 하는걸 추천
블록체인 / 인기없는 언어가 연봉은 많음 ㅋㅋㅋㅋ
머리가 감당하ㅣㄱ 힘들면 차라리 많이 안쓴느 언어 쓰고 평생 직장 가지는거 추천?? 코볼 같은거
돈 많이 준다해도 코볼은 안배우고 싶다래요
미래가 불안정함... 너무 옛날 언어라서 언제까지 사람들이 이걸 찾을까 싶어서
그런 걱정때문일듯 .net 은 엄청 인기 많음

메인은 자바스크립트로 못하는게 없음




조금 더 나중에


이번에는 AWS s3 Lambda 여기서 오류가 많이 날수도.., https 적용
책보고 업로드하기 따라 할거임

패키지마다 최적화 되는게 잇는데 옵티마이저???
빌드하면서 번들 애널라이저로 모멘트같은 빌드 용량 많이 차지하는거 최적화 도 했따느데
이거는 하나하나 검색하면서 찾아야 합니다 treeshaking 등등 이거 내가 했다고?
 웹팩 옵티마이제이션 등등 최적화가 자동 수동 케이스가 너무 다양ㅇ해서 그럼

일단 next 배포면 package.son 스크립트 수정
scripts: {
  "build": cross-env ALANYZE=true NODE_ENV=production next build",
  start: "cross-env NODE_ENV=production next start -p 3060"
}


배포 직전에 하는거

빌드로
moment 이거는 용량이 너무 커서 day.js 이건 용량이 1/30으로 줄음 그래서 이거 쓰세요

번들 애널라이저에서 필요없는거 삭제하기
1번째로...
moment locale tree shaking
따봉 많이 받은거 받아서 쓰세요 웹팩에서 설정하면 됩니다.

빌드 시 1메가만 안넘게 

깃 클론
git remote add origin [URL]
------------------------------------------------
git add .   이거 먼저 하고
git commit -m "COMMIT MESSAGE"     마스터에다가 기록
git push origin master
깃에 env pem 파일 한번 올라가면 그냥 리포지터리 다시 삭제하고 파야함
커밋을 다시 해도 소용이 없음...

aws 에서
git pull 하면 레포지터리에서 업데이트 된거 푸시해서 가져옮 변경사항 가져오시고

aws 에다가 소스 코드를 보낼건데 깃으로 보낼수 있고 ftp 로 보낼 수도 있고
근데 깃이 더 편해 보이긴 한다... ㅎㅎㅎ

AWS
  EC2
  일반적인 초기단계 서비스는 프리티어에서도 사용가능
  일반적인 서버에서는 모니터링이 필요한데 지금은 필요가 없음

서버 접속하려면 깃으로 연결된 해당 폴더 가서.. pem 파일 있는곳말ㅇ야
거기서 ssh -i 실행하면 됨

노드 설치를 해주시는데 필요한거 bcrypt 나 기타 등등 모듈이 작동 안하는게 있음 그렇기때ㅜㅁㄴ에
sudo apt-get install -y build-essential
이거 꼭 설치 해주세용!